apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "org.emunix.metaparser"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_PLATFORM=android-21", "-DCMAKE_BUILD_TYPE=Release",
                        "-DANDROID_ARM_MODE=arm"
                version "3.10.2"
            }
        }
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    externalNativeBuild {
        cmake {
            path "src/main/c/CMakeLists.txt"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'

    implementation 'androidx.appcompat:appcompat:1.1.0-alpha03'
    implementation 'androidx.core:core-ktx:1.1.0-alpha05'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation "androidx.lifecycle:lifecycle-extensions:2.1.0-alpha03"
    implementation 'com.google.android.material:material:1.1.0-alpha04'
    implementation 'commons-io:commons-io:2.6'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

task deleteDependencies(type: Delete) {
    delete 'src/main/c/Instead/Instead', 'src/main/c/Lua/Lua'
}

task downloadDependencies(dependsOn: deleteDependencies) {
    def Instead = '3.3.0'
    def Lua = '5.1.5'

    doLast {
        download {
            src "https://github.com/instead-hub/instead/archive/${Instead}.tar.gz"
            dest new File(buildDir, "instead-${Instead}.tar.gz")
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/instead-${Instead}.tar.gz"))
            into 'src/main/c/Instead/'
        }
        file("src/main/c/Instead/instead-${Instead}").renameTo(file('src/main/c/Instead/Instead'))
        delete("src/main/c/Instead/instead-${Instead}")
        delete("src/main/c/Instead/pax_global_header")

        download {
            src "https://www.lua.org/ftp/lua-${Lua}.tar.gz"
            dest buildDir
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/lua-${Lua}.tar.gz"))
            into 'src/main/c/Lua/'
        }
        file("src/main/c/Lua/lua-${Lua}").renameTo(file('src/main/c/Lua/Lua'))
        delete("src/main/c/Lua/lua-${Lua}")
    }
}

task copyStead(type: Copy) {
    description = 'Copies stead folder from Instead to assets'
    from 'src/main/c/Instead/Instead/stead/stead3/'
    into 'src/main/assets/stead/stead3/'
    exclude '**/CMakeLists.txt', 'Makefile'
}

task copyTiny3(type: Copy) {
    description = 'Copies tiny3.lua from Instead to assets'
    from 'src/main/c/Instead/Instead/src/tiny/tiny3.lua'
    into 'src/main/assets/stead/'
}

task cleanAssets(type: Delete) {
    delete 'src/main/assets/stead/'
}

preBuild.dependsOn copyStead, copyTiny3

afterEvaluate {
    if (project.hasProperty("packageRelease")) {
        packageRelease.finalizedBy(cleanAssets)
    }
    if (project.hasProperty("packageDebug")) {
        packageDebug.finalizedBy(cleanAssets)
    }
    if (project.hasProperty("clean")) {
        clean.finalizedBy(cleanAssets)
    }
}